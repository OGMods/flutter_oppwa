// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class oppwa {

  public enum ProviderMode {
    live(0),
    test(1);

    private int index;
    private ProviderMode(final int index) {
      this.index = index;
    }
  }

  public enum TransactionType {
    sync(0),
    async(1);

    private int index;
    private TransactionType(final int index) {
      this.index = index;
    }
  }

  public enum YooKassaStatus {
    succeeded(0),
    pending(1),
    waitingForCapture(2),
    canceled(3),
    undefined(4);

    private int index;
    private YooKassaStatus(final int index) {
      this.index = index;
    }
  }

  public enum STCPayVerificationOption {
    mobilePhone(0),
    qrCode(1);

    private int index;
    private STCPayVerificationOption(final int index) {
      this.index = index;
    }
  }

  public enum AuthStatus {
    authenticated(0),
    attemptProcessingPerformed(1),
    challengeRequired(2),
    decoupledConfirmed(3),
    denied(4),
    rejected(5),
    failed(6),
    informationalOnly(7);

    private int index;
    private AuthStatus(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Transaction {
    private PaymentParams paymentParams;
    public PaymentParams getPaymentParams() { return paymentParams; }
    public void setPaymentParams(PaymentParams setterArg) { this.paymentParams = setterArg; }

    private TransactionType transactionType;
    public TransactionType getTransactionType() { return transactionType; }
    public void setTransactionType(TransactionType setterArg) { this.transactionType = setterArg; }

    private String redirectUrl;
    public String getRedirectUrl() { return redirectUrl; }
    public void setRedirectUrl(String setterArg) { this.redirectUrl = setterArg; }

    private String threeDS2MethodRedirectUrl;
    public String getThreeDS2MethodRedirectUrl() { return threeDS2MethodRedirectUrl; }
    public void setThreeDS2MethodRedirectUrl(String setterArg) { this.threeDS2MethodRedirectUrl = setterArg; }

    private ThreeDS2Info threeDS2Info;
    public ThreeDS2Info getThreeDS2Info() { return threeDS2Info; }
    public void setThreeDS2Info(ThreeDS2Info setterArg) { this.threeDS2Info = setterArg; }

    private YooKassaInfo yooKassaInfo;
    public YooKassaInfo getYooKassaInfo() { return yooKassaInfo; }
    public void setYooKassaInfo(YooKassaInfo setterArg) { this.yooKassaInfo = setterArg; }

    private Map<String, String> brandSpecificInfo;
    public Map<String, String> getBrandSpecificInfo() { return brandSpecificInfo; }
    public void setBrandSpecificInfo(Map<String, String> setterArg) { this.brandSpecificInfo = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("paymentParams", (paymentParams == null) ? null : paymentParams.toMap());
      toMapResult.put("transactionType", transactionType == null ? null : transactionType.index);
      toMapResult.put("redirectUrl", redirectUrl);
      toMapResult.put("threeDS2MethodRedirectUrl", threeDS2MethodRedirectUrl);
      toMapResult.put("threeDS2Info", (threeDS2Info == null) ? null : threeDS2Info.toMap());
      toMapResult.put("yooKassaInfo", (yooKassaInfo == null) ? null : yooKassaInfo.toMap());
      toMapResult.put("brandSpecificInfo", brandSpecificInfo);
      return toMapResult;
    }
    static Transaction fromMap(Map<String, Object> map) {
      Transaction fromMapResult = new Transaction();
      Object paymentParams = map.get("paymentParams");
      fromMapResult.paymentParams = PaymentParams.fromMap((Map)paymentParams);
      Object transactionType = map.get("transactionType");
      fromMapResult.transactionType = transactionType == null ? null : TransactionType.values()[(int)transactionType];
      Object redirectUrl = map.get("redirectUrl");
      fromMapResult.redirectUrl = (String)redirectUrl;
      Object threeDS2MethodRedirectUrl = map.get("threeDS2MethodRedirectUrl");
      fromMapResult.threeDS2MethodRedirectUrl = (String)threeDS2MethodRedirectUrl;
      Object threeDS2Info = map.get("threeDS2Info");
      fromMapResult.threeDS2Info = ThreeDS2Info.fromMap((Map)threeDS2Info);
      Object yooKassaInfo = map.get("yooKassaInfo");
      fromMapResult.yooKassaInfo = YooKassaInfo.fromMap((Map)yooKassaInfo);
      Object brandSpecificInfo = map.get("brandSpecificInfo");
      fromMapResult.brandSpecificInfo = (Map<String, String>)brandSpecificInfo;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ThreeDS2Info {
    private AuthStatus authStatus;
    public AuthStatus getAuthStatus() { return authStatus; }
    public void setAuthStatus(AuthStatus setterArg) { this.authStatus = setterArg; }

    private String authResponse;
    public String getAuthResponse() { return authResponse; }
    public void setAuthResponse(String setterArg) { this.authResponse = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("authStatus", authStatus == null ? null : authStatus.index);
      toMapResult.put("authResponse", authResponse);
      return toMapResult;
    }
    static ThreeDS2Info fromMap(Map<String, Object> map) {
      ThreeDS2Info fromMapResult = new ThreeDS2Info();
      Object authStatus = map.get("authStatus");
      fromMapResult.authStatus = authStatus == null ? null : AuthStatus.values()[(int)authStatus];
      Object authResponse = map.get("authResponse");
      fromMapResult.authResponse = (String)authResponse;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentParams {
    private String checkoutId;
    public String getCheckoutId() { return checkoutId; }
    public void setCheckoutId(String setterArg) { this.checkoutId = setterArg; }

    private String paymentBrand;
    public String getPaymentBrand() { return paymentBrand; }
    public void setPaymentBrand(String setterArg) { this.paymentBrand = setterArg; }

    private String shopperResultUrl;
    public String getShopperResultUrl() { return shopperResultUrl; }
    public void setShopperResultUrl(String setterArg) { this.shopperResultUrl = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("checkoutId", checkoutId);
      toMapResult.put("paymentBrand", paymentBrand);
      toMapResult.put("shopperResultUrl", shopperResultUrl);
      return toMapResult;
    }
    static PaymentParams fromMap(Map<String, Object> map) {
      PaymentParams fromMapResult = new PaymentParams();
      Object checkoutId = map.get("checkoutId");
      fromMapResult.checkoutId = (String)checkoutId;
      Object paymentBrand = map.get("paymentBrand");
      fromMapResult.paymentBrand = (String)paymentBrand;
      Object shopperResultUrl = map.get("shopperResultUrl");
      fromMapResult.shopperResultUrl = (String)shopperResultUrl;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class YooKassaInfo {
    private YooKassaStatus status;
    public YooKassaStatus getStatus() { return status; }
    public void setStatus(YooKassaStatus setterArg) { this.status = setterArg; }

    private String confirmationUrl;
    public String getConfirmationUrl() { return confirmationUrl; }
    public void setConfirmationUrl(String setterArg) { this.confirmationUrl = setterArg; }

    private String callbackUrl;
    public String getCallbackUrl() { return callbackUrl; }
    public void setCallbackUrl(String setterArg) { this.callbackUrl = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("status", status == null ? null : status.index);
      toMapResult.put("confirmationUrl", confirmationUrl);
      toMapResult.put("callbackUrl", callbackUrl);
      return toMapResult;
    }
    static YooKassaInfo fromMap(Map<String, Object> map) {
      YooKassaInfo fromMapResult = new YooKassaInfo();
      Object status = map.get("status");
      fromMapResult.status = status == null ? null : YooKassaStatus.values()[(int)status];
      Object confirmationUrl = map.get("confirmationUrl");
      fromMapResult.confirmationUrl = (String)confirmationUrl;
      Object callbackUrl = map.get("callbackUrl");
      fromMapResult.callbackUrl = (String)callbackUrl;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FlutterOppwaException {
    private String errorCode;
    public String getErrorCode() { return errorCode; }
    public void setErrorCode(String setterArg) { this.errorCode = setterArg; }

    private String errorMessage;
    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String setterArg) { this.errorMessage = setterArg; }

    private PaymentError paymentError;
    public PaymentError getPaymentError() { return paymentError; }
    public void setPaymentError(PaymentError setterArg) { this.paymentError = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("errorCode", errorCode);
      toMapResult.put("errorMessage", errorMessage);
      toMapResult.put("paymentError", (paymentError == null) ? null : paymentError.toMap());
      return toMapResult;
    }
    static FlutterOppwaException fromMap(Map<String, Object> map) {
      FlutterOppwaException fromMapResult = new FlutterOppwaException();
      Object errorCode = map.get("errorCode");
      fromMapResult.errorCode = (String)errorCode;
      Object errorMessage = map.get("errorMessage");
      fromMapResult.errorMessage = (String)errorMessage;
      Object paymentError = map.get("paymentError");
      fromMapResult.paymentError = PaymentError.fromMap((Map)paymentError);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentError {
    private String code;
    public String getCode() { return code; }
    public void setCode(String setterArg) { this.code = setterArg; }

    private String message;
    public String getMessage() { return message; }
    public void setMessage(String setterArg) { this.message = setterArg; }

    private String info;
    public String getInfo() { return info; }
    public void setInfo(String setterArg) { this.info = setterArg; }

    private Transaction transaction;
    public Transaction getTransaction() { return transaction; }
    public void setTransaction(Transaction setterArg) { this.transaction = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("code", code);
      toMapResult.put("message", message);
      toMapResult.put("info", info);
      toMapResult.put("transaction", (transaction == null) ? null : transaction.toMap());
      return toMapResult;
    }
    static PaymentError fromMap(Map<String, Object> map) {
      PaymentError fromMapResult = new PaymentError();
      Object code = map.get("code");
      fromMapResult.code = (String)code;
      Object message = map.get("message");
      fromMapResult.message = (String)message;
      Object info = map.get("info");
      fromMapResult.info = (String)info;
      Object transaction = map.get("transaction");
      fromMapResult.transaction = Transaction.fromMap((Map)transaction);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CardTransaction {
    private String checkoutId;
    public String getCheckoutId() { return checkoutId; }
    public void setCheckoutId(String setterArg) { this.checkoutId = setterArg; }

    private String number;
    public String getNumber() { return number; }
    public void setNumber(String setterArg) { this.number = setterArg; }

    private String brand;
    public String getBrand() { return brand; }
    public void setBrand(String setterArg) { this.brand = setterArg; }

    private String holder;
    public String getHolder() { return holder; }
    public void setHolder(String setterArg) { this.holder = setterArg; }

    private String expiryMonth;
    public String getExpiryMonth() { return expiryMonth; }
    public void setExpiryMonth(String setterArg) { this.expiryMonth = setterArg; }

    private String expiryYear;
    public String getExpiryYear() { return expiryYear; }
    public void setExpiryYear(String setterArg) { this.expiryYear = setterArg; }

    private String cvv;
    public String getCvv() { return cvv; }
    public void setCvv(String setterArg) { this.cvv = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("checkoutId", checkoutId);
      toMapResult.put("number", number);
      toMapResult.put("brand", brand);
      toMapResult.put("holder", holder);
      toMapResult.put("expiryMonth", expiryMonth);
      toMapResult.put("expiryYear", expiryYear);
      toMapResult.put("cvv", cvv);
      return toMapResult;
    }
    static CardTransaction fromMap(Map<String, Object> map) {
      CardTransaction fromMapResult = new CardTransaction();
      Object checkoutId = map.get("checkoutId");
      fromMapResult.checkoutId = (String)checkoutId;
      Object number = map.get("number");
      fromMapResult.number = (String)number;
      Object brand = map.get("brand");
      fromMapResult.brand = (String)brand;
      Object holder = map.get("holder");
      fromMapResult.holder = (String)holder;
      Object expiryMonth = map.get("expiryMonth");
      fromMapResult.expiryMonth = (String)expiryMonth;
      Object expiryYear = map.get("expiryYear");
      fromMapResult.expiryYear = (String)expiryYear;
      Object cvv = map.get("cvv");
      fromMapResult.cvv = (String)cvv;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class OppwaApiCodec extends StandardMessageCodec {
    public static final OppwaApiCodec INSTANCE = new OppwaApiCodec();
    private OppwaApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CardTransaction.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return FlutterOppwaException.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return PaymentError.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return PaymentParams.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return ThreeDS2Info.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return Transaction.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return YooKassaInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CardTransaction) {
        stream.write(128);
        writeValue(stream, ((CardTransaction) value).toMap());
      } else 
      if (value instanceof FlutterOppwaException) {
        stream.write(129);
        writeValue(stream, ((FlutterOppwaException) value).toMap());
      } else 
      if (value instanceof PaymentError) {
        stream.write(130);
        writeValue(stream, ((PaymentError) value).toMap());
      } else 
      if (value instanceof PaymentParams) {
        stream.write(131);
        writeValue(stream, ((PaymentParams) value).toMap());
      } else 
      if (value instanceof ThreeDS2Info) {
        stream.write(132);
        writeValue(stream, ((ThreeDS2Info) value).toMap());
      } else 
      if (value instanceof Transaction) {
        stream.write(133);
        writeValue(stream, ((Transaction) value).toMap());
      } else 
      if (value instanceof YooKassaInfo) {
        stream.write(134);
        writeValue(stream, ((YooKassaInfo) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface OppwaApi {
    void initialize(Long mode);
    void submitCardTransaction(CardTransaction transaction, Result<Void> result);
    void error(Result<FlutterOppwaException> result);

    /** The codec used by OppwaApi. */
    static MessageCodec<Object> getCodec() {
      return OppwaApiCodec.INSTANCE;
    }

    /** Sets up an instance of `OppwaApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, OppwaApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OppwaApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number modeArg = (Number)args.get(0);
              if (modeArg == null) {
                throw new NullPointerException("modeArg unexpectedly null.");
              }
              api.initialize(modeArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OppwaApi.submitCardTransaction", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CardTransaction transactionArg = (CardTransaction)args.get(0);
              if (transactionArg == null) {
                throw new NullPointerException("transactionArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.submitCardTransaction(transactionArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.OppwaApi.error", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<FlutterOppwaException> resultCallback = new Result<FlutterOppwaException>() {
                public void success(FlutterOppwaException result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.error(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
