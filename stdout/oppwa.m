// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "oppwa.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface Transaction ()
+ (Transaction *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ThreeDS2Info ()
+ (ThreeDS2Info *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PaymentParams ()
+ (PaymentParams *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YooKassaInfo ()
+ (YooKassaInfo *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FlutterOppwaException ()
+ (FlutterOppwaException *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface PaymentError ()
+ (PaymentError *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface CardTransaction ()
+ (CardTransaction *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Transaction
+ (Transaction *)fromMap:(NSDictionary *)dict {
  Transaction *result = [[Transaction alloc] init];
  result.paymentParams = [PaymentParams fromMap:dict[@"paymentParams"]];
  if ((NSNull *)result.paymentParams == [NSNull null]) {
    result.paymentParams = nil;
  }
  result.transactionType = [dict[@"transactionType"] integerValue];
  result.redirectUrl = dict[@"redirectUrl"];
  if ((NSNull *)result.redirectUrl == [NSNull null]) {
    result.redirectUrl = nil;
  }
  result.threeDS2MethodRedirectUrl = dict[@"threeDS2MethodRedirectUrl"];
  if ((NSNull *)result.threeDS2MethodRedirectUrl == [NSNull null]) {
    result.threeDS2MethodRedirectUrl = nil;
  }
  result.threeDS2Info = [ThreeDS2Info fromMap:dict[@"threeDS2Info"]];
  if ((NSNull *)result.threeDS2Info == [NSNull null]) {
    result.threeDS2Info = nil;
  }
  result.yooKassaInfo = [YooKassaInfo fromMap:dict[@"yooKassaInfo"]];
  if ((NSNull *)result.yooKassaInfo == [NSNull null]) {
    result.yooKassaInfo = nil;
  }
  result.brandSpecificInfo = dict[@"brandSpecificInfo"];
  if ((NSNull *)result.brandSpecificInfo == [NSNull null]) {
    result.brandSpecificInfo = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.paymentParams ? [self.paymentParams toMap] : [NSNull null]), @"paymentParams", @(self.transactionType), @"transactionType", (self.redirectUrl ? self.redirectUrl : [NSNull null]), @"redirectUrl", (self.threeDS2MethodRedirectUrl ? self.threeDS2MethodRedirectUrl : [NSNull null]), @"threeDS2MethodRedirectUrl", (self.threeDS2Info ? [self.threeDS2Info toMap] : [NSNull null]), @"threeDS2Info", (self.yooKassaInfo ? [self.yooKassaInfo toMap] : [NSNull null]), @"yooKassaInfo", (self.brandSpecificInfo ? self.brandSpecificInfo : [NSNull null]), @"brandSpecificInfo", nil];
}
@end

@implementation ThreeDS2Info
+ (ThreeDS2Info *)fromMap:(NSDictionary *)dict {
  ThreeDS2Info *result = [[ThreeDS2Info alloc] init];
  result.authStatus = [dict[@"authStatus"] integerValue];
  result.authResponse = dict[@"authResponse"];
  if ((NSNull *)result.authResponse == [NSNull null]) {
    result.authResponse = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.authStatus), @"authStatus", (self.authResponse ? self.authResponse : [NSNull null]), @"authResponse", nil];
}
@end

@implementation PaymentParams
+ (PaymentParams *)fromMap:(NSDictionary *)dict {
  PaymentParams *result = [[PaymentParams alloc] init];
  result.checkoutId = dict[@"checkoutId"];
  if ((NSNull *)result.checkoutId == [NSNull null]) {
    result.checkoutId = nil;
  }
  result.paymentBrand = dict[@"paymentBrand"];
  if ((NSNull *)result.paymentBrand == [NSNull null]) {
    result.paymentBrand = nil;
  }
  result.shopperResultUrl = dict[@"shopperResultUrl"];
  if ((NSNull *)result.shopperResultUrl == [NSNull null]) {
    result.shopperResultUrl = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.checkoutId ? self.checkoutId : [NSNull null]), @"checkoutId", (self.paymentBrand ? self.paymentBrand : [NSNull null]), @"paymentBrand", (self.shopperResultUrl ? self.shopperResultUrl : [NSNull null]), @"shopperResultUrl", nil];
}
@end

@implementation YooKassaInfo
+ (YooKassaInfo *)fromMap:(NSDictionary *)dict {
  YooKassaInfo *result = [[YooKassaInfo alloc] init];
  result.status = [dict[@"status"] integerValue];
  result.confirmationUrl = dict[@"confirmationUrl"];
  if ((NSNull *)result.confirmationUrl == [NSNull null]) {
    result.confirmationUrl = nil;
  }
  result.callbackUrl = dict[@"callbackUrl"];
  if ((NSNull *)result.callbackUrl == [NSNull null]) {
    result.callbackUrl = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.status), @"status", (self.confirmationUrl ? self.confirmationUrl : [NSNull null]), @"confirmationUrl", (self.callbackUrl ? self.callbackUrl : [NSNull null]), @"callbackUrl", nil];
}
@end

@implementation FlutterOppwaException
+ (FlutterOppwaException *)fromMap:(NSDictionary *)dict {
  FlutterOppwaException *result = [[FlutterOppwaException alloc] init];
  result.errorCode = dict[@"errorCode"];
  if ((NSNull *)result.errorCode == [NSNull null]) {
    result.errorCode = nil;
  }
  result.errorMessage = dict[@"errorMessage"];
  if ((NSNull *)result.errorMessage == [NSNull null]) {
    result.errorMessage = nil;
  }
  result.paymentError = [PaymentError fromMap:dict[@"paymentError"]];
  if ((NSNull *)result.paymentError == [NSNull null]) {
    result.paymentError = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.errorCode ? self.errorCode : [NSNull null]), @"errorCode", (self.errorMessage ? self.errorMessage : [NSNull null]), @"errorMessage", (self.paymentError ? [self.paymentError toMap] : [NSNull null]), @"paymentError", nil];
}
@end

@implementation PaymentError
+ (PaymentError *)fromMap:(NSDictionary *)dict {
  PaymentError *result = [[PaymentError alloc] init];
  result.code = dict[@"code"];
  if ((NSNull *)result.code == [NSNull null]) {
    result.code = nil;
  }
  result.message = dict[@"message"];
  if ((NSNull *)result.message == [NSNull null]) {
    result.message = nil;
  }
  result.info = dict[@"info"];
  if ((NSNull *)result.info == [NSNull null]) {
    result.info = nil;
  }
  result.transaction = [Transaction fromMap:dict[@"transaction"]];
  if ((NSNull *)result.transaction == [NSNull null]) {
    result.transaction = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.code ? self.code : [NSNull null]), @"code", (self.message ? self.message : [NSNull null]), @"message", (self.info ? self.info : [NSNull null]), @"info", (self.transaction ? [self.transaction toMap] : [NSNull null]), @"transaction", nil];
}
@end

@implementation CardTransaction
+ (CardTransaction *)fromMap:(NSDictionary *)dict {
  CardTransaction *result = [[CardTransaction alloc] init];
  result.checkoutId = dict[@"checkoutId"];
  if ((NSNull *)result.checkoutId == [NSNull null]) {
    result.checkoutId = nil;
  }
  result.number = dict[@"number"];
  if ((NSNull *)result.number == [NSNull null]) {
    result.number = nil;
  }
  result.brand = dict[@"brand"];
  if ((NSNull *)result.brand == [NSNull null]) {
    result.brand = nil;
  }
  result.holder = dict[@"holder"];
  if ((NSNull *)result.holder == [NSNull null]) {
    result.holder = nil;
  }
  result.expiryMonth = dict[@"expiryMonth"];
  if ((NSNull *)result.expiryMonth == [NSNull null]) {
    result.expiryMonth = nil;
  }
  result.expiryYear = dict[@"expiryYear"];
  if ((NSNull *)result.expiryYear == [NSNull null]) {
    result.expiryYear = nil;
  }
  result.cvv = dict[@"cvv"];
  if ((NSNull *)result.cvv == [NSNull null]) {
    result.cvv = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.checkoutId ? self.checkoutId : [NSNull null]), @"checkoutId", (self.number ? self.number : [NSNull null]), @"number", (self.brand ? self.brand : [NSNull null]), @"brand", (self.holder ? self.holder : [NSNull null]), @"holder", (self.expiryMonth ? self.expiryMonth : [NSNull null]), @"expiryMonth", (self.expiryYear ? self.expiryYear : [NSNull null]), @"expiryYear", (self.cvv ? self.cvv : [NSNull null]), @"cvv", nil];
}
@end

@interface OppwaApiCodecReader : FlutterStandardReader
@end
@implementation OppwaApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [CardTransaction fromMap:[self readValue]];
    
    case 129:     
      return [FlutterOppwaException fromMap:[self readValue]];
    
    case 130:     
      return [PaymentError fromMap:[self readValue]];
    
    case 131:     
      return [PaymentParams fromMap:[self readValue]];
    
    case 132:     
      return [ThreeDS2Info fromMap:[self readValue]];
    
    case 133:     
      return [Transaction fromMap:[self readValue]];
    
    case 134:     
      return [YooKassaInfo fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface OppwaApiCodecWriter : FlutterStandardWriter
@end
@implementation OppwaApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[CardTransaction class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FlutterOppwaException class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PaymentError class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[PaymentParams class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ThreeDS2Info class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[Transaction class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YooKassaInfo class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface OppwaApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation OppwaApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[OppwaApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[OppwaApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *OppwaApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    OppwaApiCodecReaderWriter *readerWriter = [[OppwaApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void OppwaApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<OppwaApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.OppwaApi.initialize"
        binaryMessenger:binaryMessenger
        codec:OppwaApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeMode:error:)], @"OppwaApi api (%@) doesn't respond to @selector(initializeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_mode = args[0];
        FlutterError *error;
        [api initializeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.OppwaApi.submitCardTransaction"
        binaryMessenger:binaryMessenger
        codec:OppwaApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(submitCardTransactionTransaction:completion:)], @"OppwaApi api (%@) doesn't respond to @selector(submitCardTransactionTransaction:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        CardTransaction *arg_transaction = args[0];
        [api submitCardTransactionTransaction:arg_transaction completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.OppwaApi.error"
        binaryMessenger:binaryMessenger
        codec:OppwaApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(errorWithCompletion:)], @"OppwaApi api (%@) doesn't respond to @selector(errorWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api errorWithCompletion:^(FlutterOppwaException *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
