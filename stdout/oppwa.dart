// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum ProviderMode {
  live,
  test,
}

enum TransactionType {
  sync,
  async,
}

enum YooKassaStatus {
  succeeded,
  pending,
  waitingForCapture,
  canceled,
  undefined,
}

enum STCPayVerificationOption {
  mobilePhone,
  qrCode,
}

enum AuthStatus {
  authenticated,
  attemptProcessingPerformed,
  challengeRequired,
  decoupledConfirmed,
  denied,
  rejected,
  failed,
  informationalOnly,
}

class Transaction {
  PaymentParams? paymentParams;
  TransactionType? transactionType;
  String? redirectUrl;
  String? threeDS2MethodRedirectUrl;
  ThreeDS2Info? threeDS2Info;
  YooKassaInfo? yooKassaInfo;
  Map<String?, String?>? brandSpecificInfo;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['paymentParams'] = paymentParams == null ? null : paymentParams!.encode();
    pigeonMap['transactionType'] = transactionType == null ? null : transactionType!.index;
    pigeonMap['redirectUrl'] = redirectUrl;
    pigeonMap['threeDS2MethodRedirectUrl'] = threeDS2MethodRedirectUrl;
    pigeonMap['threeDS2Info'] = threeDS2Info == null ? null : threeDS2Info!.encode();
    pigeonMap['yooKassaInfo'] = yooKassaInfo == null ? null : yooKassaInfo!.encode();
    pigeonMap['brandSpecificInfo'] = brandSpecificInfo;
    return pigeonMap;
  }

  static Transaction decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Transaction()
      ..paymentParams = pigeonMap['paymentParams'] != null
          ? PaymentParams.decode(pigeonMap['paymentParams']!)
          : null
      ..transactionType = pigeonMap['transactionType'] != null
          ? TransactionType.values[pigeonMap['transactionType']! as int]
          : null
      ..redirectUrl = pigeonMap['redirectUrl'] as String?
      ..threeDS2MethodRedirectUrl = pigeonMap['threeDS2MethodRedirectUrl'] as String?
      ..threeDS2Info = pigeonMap['threeDS2Info'] != null
          ? ThreeDS2Info.decode(pigeonMap['threeDS2Info']!)
          : null
      ..yooKassaInfo = pigeonMap['yooKassaInfo'] != null
          ? YooKassaInfo.decode(pigeonMap['yooKassaInfo']!)
          : null
      ..brandSpecificInfo = (pigeonMap['brandSpecificInfo'] as Map<Object?, Object?>?)?.cast<String?, String?>();
  }
}

class ThreeDS2Info {
  AuthStatus? authStatus;
  String? authResponse;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['authStatus'] = authStatus == null ? null : authStatus!.index;
    pigeonMap['authResponse'] = authResponse;
    return pigeonMap;
  }

  static ThreeDS2Info decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ThreeDS2Info()
      ..authStatus = pigeonMap['authStatus'] != null
          ? AuthStatus.values[pigeonMap['authStatus']! as int]
          : null
      ..authResponse = pigeonMap['authResponse'] as String?;
  }
}

class PaymentParams {
  String? checkoutId;
  String? paymentBrand;
  String? shopperResultUrl;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['checkoutId'] = checkoutId;
    pigeonMap['paymentBrand'] = paymentBrand;
    pigeonMap['shopperResultUrl'] = shopperResultUrl;
    return pigeonMap;
  }

  static PaymentParams decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentParams()
      ..checkoutId = pigeonMap['checkoutId'] as String?
      ..paymentBrand = pigeonMap['paymentBrand'] as String?
      ..shopperResultUrl = pigeonMap['shopperResultUrl'] as String?;
  }
}

class YooKassaInfo {
  YooKassaStatus? status;
  String? confirmationUrl;
  String? callbackUrl;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['status'] = status == null ? null : status!.index;
    pigeonMap['confirmationUrl'] = confirmationUrl;
    pigeonMap['callbackUrl'] = callbackUrl;
    return pigeonMap;
  }

  static YooKassaInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return YooKassaInfo()
      ..status = pigeonMap['status'] != null
          ? YooKassaStatus.values[pigeonMap['status']! as int]
          : null
      ..confirmationUrl = pigeonMap['confirmationUrl'] as String?
      ..callbackUrl = pigeonMap['callbackUrl'] as String?;
  }
}

class FlutterOppwaException {
  String? errorCode;
  String? errorMessage;
  PaymentError? paymentError;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['errorCode'] = errorCode;
    pigeonMap['errorMessage'] = errorMessage;
    pigeonMap['paymentError'] = paymentError == null ? null : paymentError!.encode();
    return pigeonMap;
  }

  static FlutterOppwaException decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FlutterOppwaException()
      ..errorCode = pigeonMap['errorCode'] as String?
      ..errorMessage = pigeonMap['errorMessage'] as String?
      ..paymentError = pigeonMap['paymentError'] != null
          ? PaymentError.decode(pigeonMap['paymentError']!)
          : null;
  }
}

class PaymentError {
  String? code;
  String? message;
  String? info;
  Transaction? transaction;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['code'] = code;
    pigeonMap['message'] = message;
    pigeonMap['info'] = info;
    pigeonMap['transaction'] = transaction == null ? null : transaction!.encode();
    return pigeonMap;
  }

  static PaymentError decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentError()
      ..code = pigeonMap['code'] as String?
      ..message = pigeonMap['message'] as String?
      ..info = pigeonMap['info'] as String?
      ..transaction = pigeonMap['transaction'] != null
          ? Transaction.decode(pigeonMap['transaction']!)
          : null;
  }
}

class CardTransaction {
  String? checkoutId;
  String? number;
  String? brand;
  String? holder;
  String? expiryMonth;
  String? expiryYear;
  String? cvv;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['checkoutId'] = checkoutId;
    pigeonMap['number'] = number;
    pigeonMap['brand'] = brand;
    pigeonMap['holder'] = holder;
    pigeonMap['expiryMonth'] = expiryMonth;
    pigeonMap['expiryYear'] = expiryYear;
    pigeonMap['cvv'] = cvv;
    return pigeonMap;
  }

  static CardTransaction decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CardTransaction()
      ..checkoutId = pigeonMap['checkoutId'] as String?
      ..number = pigeonMap['number'] as String?
      ..brand = pigeonMap['brand'] as String?
      ..holder = pigeonMap['holder'] as String?
      ..expiryMonth = pigeonMap['expiryMonth'] as String?
      ..expiryYear = pigeonMap['expiryYear'] as String?
      ..cvv = pigeonMap['cvv'] as String?;
  }
}

class _OppwaApiCodec extends StandardMessageCodec {
  const _OppwaApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CardTransaction) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is FlutterOppwaException) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentError) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is PaymentParams) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is ThreeDS2Info) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is Transaction) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is YooKassaInfo) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CardTransaction.decode(readValue(buffer)!);
      
      case 129:       
        return FlutterOppwaException.decode(readValue(buffer)!);
      
      case 130:       
        return PaymentError.decode(readValue(buffer)!);
      
      case 131:       
        return PaymentParams.decode(readValue(buffer)!);
      
      case 132:       
        return ThreeDS2Info.decode(readValue(buffer)!);
      
      case 133:       
        return Transaction.decode(readValue(buffer)!);
      
      case 134:       
        return YooKassaInfo.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class OppwaApi {
  /// Constructor for [OppwaApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  OppwaApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _OppwaApiCodec();

  Future<void> initialize(int arg_mode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OppwaApi.initialize', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_mode]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> submitCardTransaction(CardTransaction arg_transaction) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OppwaApi.submitCardTransaction', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_transaction]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<FlutterOppwaException> error() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.OppwaApi.error', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as FlutterOppwaException?)!;
    }
  }
}
